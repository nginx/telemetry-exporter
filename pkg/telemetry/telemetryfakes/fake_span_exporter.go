// Code generated by counterfeiter. DO NOT EDIT.
package telemetryfakes

import (
	"context"
	"sync"

	"github.com/nginx/telemetry-exporter/pkg/telemetry"
	"go.opentelemetry.io/otel/sdk/trace"
)

type FakeSpanExporter struct {
	ExportSpansStub        func(context.Context, []trace.ReadOnlySpan) error
	exportSpansMutex       sync.RWMutex
	exportSpansArgsForCall []struct {
		arg1 context.Context
		arg2 []trace.ReadOnlySpan
	}
	exportSpansReturns struct {
		result1 error
	}
	exportSpansReturnsOnCall map[int]struct {
		result1 error
	}
	ShutdownStub        func(context.Context) error
	shutdownMutex       sync.RWMutex
	shutdownArgsForCall []struct {
		arg1 context.Context
	}
	shutdownReturns struct {
		result1 error
	}
	shutdownReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeSpanExporter) ExportSpans(arg1 context.Context, arg2 []trace.ReadOnlySpan) error {
	var arg2Copy []trace.ReadOnlySpan
	if arg2 != nil {
		arg2Copy = make([]trace.ReadOnlySpan, len(arg2))
		copy(arg2Copy, arg2)
	}
	fake.exportSpansMutex.Lock()
	ret, specificReturn := fake.exportSpansReturnsOnCall[len(fake.exportSpansArgsForCall)]
	fake.exportSpansArgsForCall = append(fake.exportSpansArgsForCall, struct {
		arg1 context.Context
		arg2 []trace.ReadOnlySpan
	}{arg1, arg2Copy})
	stub := fake.ExportSpansStub
	fakeReturns := fake.exportSpansReturns
	fake.recordInvocation("ExportSpans", []interface{}{arg1, arg2Copy})
	fake.exportSpansMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeSpanExporter) ExportSpansCallCount() int {
	fake.exportSpansMutex.RLock()
	defer fake.exportSpansMutex.RUnlock()
	return len(fake.exportSpansArgsForCall)
}

func (fake *FakeSpanExporter) ExportSpansCalls(stub func(context.Context, []trace.ReadOnlySpan) error) {
	fake.exportSpansMutex.Lock()
	defer fake.exportSpansMutex.Unlock()
	fake.ExportSpansStub = stub
}

func (fake *FakeSpanExporter) ExportSpansArgsForCall(i int) (context.Context, []trace.ReadOnlySpan) {
	fake.exportSpansMutex.RLock()
	defer fake.exportSpansMutex.RUnlock()
	argsForCall := fake.exportSpansArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeSpanExporter) ExportSpansReturns(result1 error) {
	fake.exportSpansMutex.Lock()
	defer fake.exportSpansMutex.Unlock()
	fake.ExportSpansStub = nil
	fake.exportSpansReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeSpanExporter) ExportSpansReturnsOnCall(i int, result1 error) {
	fake.exportSpansMutex.Lock()
	defer fake.exportSpansMutex.Unlock()
	fake.ExportSpansStub = nil
	if fake.exportSpansReturnsOnCall == nil {
		fake.exportSpansReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.exportSpansReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeSpanExporter) Shutdown(arg1 context.Context) error {
	fake.shutdownMutex.Lock()
	ret, specificReturn := fake.shutdownReturnsOnCall[len(fake.shutdownArgsForCall)]
	fake.shutdownArgsForCall = append(fake.shutdownArgsForCall, struct {
		arg1 context.Context
	}{arg1})
	stub := fake.ShutdownStub
	fakeReturns := fake.shutdownReturns
	fake.recordInvocation("Shutdown", []interface{}{arg1})
	fake.shutdownMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeSpanExporter) ShutdownCallCount() int {
	fake.shutdownMutex.RLock()
	defer fake.shutdownMutex.RUnlock()
	return len(fake.shutdownArgsForCall)
}

func (fake *FakeSpanExporter) ShutdownCalls(stub func(context.Context) error) {
	fake.shutdownMutex.Lock()
	defer fake.shutdownMutex.Unlock()
	fake.ShutdownStub = stub
}

func (fake *FakeSpanExporter) ShutdownArgsForCall(i int) context.Context {
	fake.shutdownMutex.RLock()
	defer fake.shutdownMutex.RUnlock()
	argsForCall := fake.shutdownArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSpanExporter) ShutdownReturns(result1 error) {
	fake.shutdownMutex.Lock()
	defer fake.shutdownMutex.Unlock()
	fake.ShutdownStub = nil
	fake.shutdownReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeSpanExporter) ShutdownReturnsOnCall(i int, result1 error) {
	fake.shutdownMutex.Lock()
	defer fake.shutdownMutex.Unlock()
	fake.ShutdownStub = nil
	if fake.shutdownReturnsOnCall == nil {
		fake.shutdownReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.shutdownReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeSpanExporter) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.exportSpansMutex.RLock()
	defer fake.exportSpansMutex.RUnlock()
	fake.shutdownMutex.RLock()
	defer fake.shutdownMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeSpanExporter) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ telemetry.SpanExporter = new(FakeSpanExporter)
